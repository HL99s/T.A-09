version: '3'
services:
    keycloak:
        image: 'quay.io/keycloak/keycloak:15.0.2'
        container_name: keycloak
        environment:
            - KEYCLOAK_USER=admin
            - KEYCLOAK_PASSWORD=admin
            - KEYCLOAK_IMPORT=/tmp/test-realm.json
            - DB_VENDOR=h2 # don't try to discover mysql in the network
        volumes:
            - ../main-app/main-webapp/src/main/resources/keycloak/keycloak-export.json:/tmp/test-realm.json  #might need to delete volume to avoid dup user error
        ports:
            - 8082:8080
        networks:
            - appnetwork
    activemq_artemis:
        image: 'jhatdv/activemq-artemis:2.18.0'
        container_name: activemqArtemis
        environment:
            - ARTEMIS_USERNAME=admin
            - ARTEMIS_PASSWORD=admin
        ports:
            - 8161:8161  # use this to login
            - 61616:61616
        networks:
            - appnetwork
    mysql:
        image: 'mysql:8.0.25'
        environment:
            - MYSQL_ROOT_PASSWORD=password
            - MYSQL_DATABASE=seedapp
        ports:
            - 3306:3306
        command: mysqld --lower_case_table_names=1 --skip-ssl --character_set_server=utf8mb4 --explicit_defaults_for_timestamp
        networks:
            - appnetwork
    zookeeper:
        image: confluentinc/cp-zookeeper:7.0.0
        hostname: zookeeper
        container_name: zookeeper
        environment:
            ZOOKEEPER_CLIENT_PORT: 2181
            ZOOKEEPER_TICK_TIME: 2000
        networks:
            - appnetwork
    broker:
        image: confluentinc/cp-kafka:7.0.0
        container_name: kafkabroker
        ports:
            - "9092:9092"
        depends_on:
            - zookeeper
        environment:
            KAFKA_BROKER_ID: 1
            KAFKA_ZOOKEEPER_CONNECT: 'zookeeper:2181'
            KAFKA_LISTENER_SECURITY_PROTOCOL_MAP: PLAINTEXT:PLAINTEXT,PLAINTEXT_INTERNAL:PLAINTEXT
            KAFKA_ADVERTISED_LISTENERS: PLAINTEXT://localhost:9092,PLAINTEXT_INTERNAL://broker:29092
            KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR: 1
            KAFKA_TRANSACTION_STATE_LOG_MIN_ISR: 1
            KAFKA_TRANSACTION_STATE_LOG_REPLICATION_FACTOR: 1
        networks:
            - appnetwork
    kafka-ui:
        image: provectuslabs/kafka-ui:latest
        ports:
            - "8089:8080"
        environment:
            KAFKA_CLUSTERS_0_NAME: kafkabroker
            KAFKA_CLUSTERS_0_BOOTSTRAPSERVERS: kafkabroker:9092 # internal access
            KAFKA_CLUSTERS_0_ZOOKEEPER: zookeeper:2181
        networks:
            - appnetwork
volumes:
    esdata1:
        driver: local
networks:
    appnetwork:
        driver: bridge


#run using
#docker-compose -f docker-compose.yml up
# or just docker-compose up
