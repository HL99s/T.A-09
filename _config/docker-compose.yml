version: '3'
services:
    keycloak:
        image: 'quay.io/keycloak/keycloak:15.0.2'
        container_name: keycloak
        environment:
            - KEYCLOAK_USER=admin
            - KEYCLOAK_PASSWORD=admin
            - KEYCLOAK_IMPORT=/tmp/test-realm.json
            - DB_VENDOR=h2 # don't try to discover mysql in the network
        volumes:
            - ../main-app/main-webapp/src/main/resources/keycloak/keycloak-export.json:/tmp/test-realm.json  #might need to delete volume to avoid dup user error
        ports:
            - 8082:8080
        networks:
            - appnetwork
    activemq_artemis:
        image: 'jhatdv/activemq-artemis:2.18.0'
        container_name: activemqArtemis
        environment:
            - ARTEMIS_USERNAME=admin
            - ARTEMIS_PASSWORD=admin
        ports:
            - 8161:8161  # use this to login
            - 61616:61616
        networks:
            - appnetwork
    mysql:
        image: 'mysql:8.0.25'
        environment:
            - MYSQL_ROOT_PASSWORD=password
            - MYSQL_DATABASE=seedapp
        ports:
            - 3306:3306
        command: mysqld --lower_case_table_names=1 --skip-ssl --character_set_server=utf8mb4 --explicit_defaults_for_timestamp
        networks:
            - appnetwork
    zookeeper1:
        image: zookeeper:3.4.9
        hostname: zookeeper1
        ports:
            - "2181:2181"
        environment:
            ZOO_MY_ID: 1
            ZOO_PORT: 2181
            ZOO_SERVERS: server.1=zookeeper1:2888:3888
        volumes:
            - ./data/zookeeper1/data:/data
            - ./data/zookeeper1/datalog:/datalog
        networks:
            - appnetwork
    kafka1:
        image: confluentinc/cp-kafka:5.4.3
        hostname: kafka1
        ports:
            - "9093:9093"
        environment:
            KAFKA_LISTENERS: OUTSIDE://0.0.0.0:9093,INTERNAL://0.0.0.0:9092
            KAFKA_ADVERTISED_LISTENERS: 'OUTSIDE://localhost:9093,INTERNAL://kafka1:9092'
            KAFKA_LISTENER_SECURITY_PROTOCOL_MAP: INTERNAL:PLAINTEXT,OUTSIDE:PLAINTEXT
            KAFKA_INTER_BROKER_LISTENER_NAME: INTERNAL
            KAFKA_ZOOKEEPER_CONNECT: "zookeeper1:2181"
            KAFKA_BROKER_ID: 1
            KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR: 1
            KAFKA_OFFSETS_TOPIC_NUM_PARTITIONS: 1
            KAFKA_LOG_FLUSH_INTERVAL_MESSAGES: 100000000000
            KAFKA_GROUP_INITIAL_REBALANCE_DELAY_MS: 0
        volumes:
            - ./data/kafka1/data:/var/lib/kafka/data
        depends_on:
            - zookeeper1
        networks:
            - appnetwork

    kafka-ui:
        image: provectuslabs/kafka-ui:latest
        ports:
            - "8089:8080"
        environment:
            KAFKA_CLUSTERS_0_NAME: kafka1
            KAFKA_CLUSTERS_0_BOOTSTRAPSERVERS: kafka1:9092 # internal access
            KAFKA_CLUSTERS_0_ZOOKEEPER: zookeeper1:2181
        networks:
            - appnetwork
volumes:
    esdata1:
        driver: local
networks:
    appnetwork:
        driver: bridge


#run using
#docker-compose -f docker-compose.yml up
# or just docker-compose up
